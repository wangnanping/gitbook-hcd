{"pageList/DirectoryList.html":{"url":"pageList/DirectoryList.html","title":"目录结构","keywords":"","body":"目录结构如下 |-- DirectoryList |-- .browserslistrc |-- .eslintignore |-- .eslintrc.js |-- .gitignore |-- .gitmodules |-- babel.config.js |-- cypress.json |-- dir.text |-- jest.config.js |-- package-lock.json |-- package.json |-- postcss.config.js |-- README.md |-- report.20200224.165403.12516.0.001.json |-- tsconfig.json |-- vue.config.js // webpack 打包配置 |-- public | |-- config.json // 接口，百度密匙 版本号 接口超时 页面初始化等 Json 信息配置 | |-- index.html | |-- manifest.json | |-- robots.txt | |-- web.config | |-- css | | |-- template // 配置5套模版样式 | |-- face_recognition | |-- img // 图片 | |-- pay | |-- pdf // PDF 在线查看器 |-- src | |-- App.vue | |-- main.ts | |-- registerServiceWorker.ts // serviceWorker 做缓存加载，暂时关闭 | |-- shims-tsx.d.ts | |-- shims-vue.d.ts | |-- types.d.ts // 申明一些静态类型文件 | |-- api // api 服务 | | |-- AuthApiServiceProxy.ts | | |-- BaseServiceProxy.ts | | |-- BillApiServiceProxy.ts | | |-- DataUploadApiServiceProxy.ts | | |-- DefaultApiService.ts | | |-- PayCenterApiServiceProxy.ts | | |-- ServiceProxyConfig.ts | | |-- SessionStorageApi.ts | | |-- TaxUploadApiServiceProxy.ts | | |-- trackService.ts | |-- assets | | |-- audio // 消息提醒 | | | |-- reminder.mp3 | | |-- css // 公用样式 | | | |-- heyui_index.css | | | |-- index.scss | | | |-- mixin.scss | | | |-- public.scss | | | |-- publicColor.scss | | | |-- transition.scss | | |-- image | |-- bus // event-bus | | |-- index.ts | |-- business | | |-- DataHandle // 对特殊类型做处理 如金额类型等，根据后台配置信息做小数点约束 | | | |-- dataHandle.ts | | | |-- rules.ts | | |-- Getdate // 公共方法 如 日期处理 | | | |-- getdate.ts | | |-- Pay // 封装多渠道支付方式 如各大银行 | | |-- main.ts | | |-- MD5.ts | |-- carTrackApi | | |-- carTrackService.ts // 对接百度鹰眼 | | |-- commonfun.ts // 公用方法处理 | |-- components | | |-- BaseComponent // 复用小模块功能组件，如按钮、下拉框、输入框、地图、图片......等根据公司业务做二次封装 | | | |-- BaseComponent.ts // 组件小模块功能组件公用方法 | | |-- BatchOperationComponent // 复用批量导入司机证件照组件 | | | |-- 说明文件.text | | | |-- DialogBatchImg | | |-- Breadcrumb // 面包屑 | | | |-- index.vue | | |-- Card // 复用的运单详情组件 | | | |-- BaseCard.ts | | | |-- card-details | | |-- ExcelImport // 针对车辆和司机的 复用 excel 表上传 和 批量处理组件 | | | |-- Car | | | |-- Driver | | | |-- DriverPay | | | |-- TransportOrder | | | |-- UploadXlsx.vue | | |-- Hamburger | | | |-- index.vue | | |-- Page // 复用的页面组件 | |-- icons // 字体图标库 | |-- router // 路由 | |-- store // vuex | |-- utils // 验证信息 | |-- views // 业务页面 中存在 Html 文件夹 为白名单页面 不需要验证权限 |-- tests |-- e2e | |-- .eslintrc.js | |-- plugins | | |-- index.js | |-- specs | | |-- test.js | |-- support | |-- commands.js | |-- index.js |-- unit |-- .eslintrc.js |-- example.spec.ts Copyright © Aron.Li 2019 all right reserved，powered by Gitbook该文件修订时间： 2020-06-16 17:19:13 "},"pageList/BasePage.html":{"url":"pageList/BasePage.html","title":"BasePage","keywords":"","body":"所有页面组件如（DialogGridPage、FormPage、GridPage......等）均继承 BasePage 1.根据名称获取组件 import { Form } from \"element-ui\"; this.getElement \"ref名称\"; 根据公用子组件获取 import BaseSelectComponent from \"@/components/BaseComponent/hcd-select/hcd-select.vue\"; this.getElement \"字段名称\"; // 当前为如formPage页面组件的prop (查看可到formPage组件) 2.toData 方法 格式化提交formData; c 类型， data 数据， separator 分割符 方式： /** * SaveContactUnitInput 类 * this.pageOptions.form.formData 为页面组件formPage 配置项 */ this.toData(SaveContactUnitInput, this.pageOptions.form.formData); // 会根据配置项 转化为以下数据格式 { xxx:\"xxx\" ...... } 3.toDataList 方法 /** * BatchContactPersonInput 类 * this.pageOptions.table.tableData 为页面组件GridPage 配置项 */ this.toDataList(BatchContactPersonInput, this.pageOptions.table.tableData); // 会根据配置项 转化为以下数据格式 { xxx:\"xxx\" ...... } 4.toDataForm 方法 // res 格式 { detail:{ name:\"小王\", age:24 } } // 使用 this.toDataForm(res) // 结果 { detail_name: \"小王\", detail_age: 24, } 5.getformData 方法 (用于详情页面数据返回进行回绑定) // 如使用formPage页面组件配置 { prop: \"detail_name\"; } // 接口返回 { detail: { name: \"小王\"; } } Copyright © Aron.Li 2019 all right reserved，powered by Gitbook该文件修订时间： 2020-06-16 17:19:13 "},"pageList/GridPage.html":{"url":"pageList/GridPage.html","title":"GridPage(table 页面)","keywords":"","body":"GridPage 配置项详解 所有配置可在子目录进行查看 展示如下图 参数： name type default Description options object {} 配置项 onFieldChange function 字段改变触发事件 onPageClick funciton table页码触发事件 onButtonClick funciton 按钮触发事件 onSelectionClick funciton 为表格配置了 selection 为 true，表格显示多选框 点击多选框触发事件 onFieldVisibleChange funciton 针对 hcd-select,下拉项选中触发 使用方式 import GridPage from \"@/components/Page/GridPage.vue\"; //注册为子组件 components Copyright © Aron.Li 2019 all right reserved，powered by Gitbook该文件修订时间： 2020-06-16 17:19:13 "},"pageList/son/gridPage_pageOptions.html":{"url":"pageList/son/gridPage_pageOptions.html","title":"Options(配置信息)","keywords":"","body":"gridPage pageOptions form(输入框) buttonGroup(按钮) buttonGroupTop(按钮) table(表格) selectableFun(表格多选框判断是否可选) title(表格标题) alertMessage(展示信息) name type default Description form Object 详解往下看 页面表头的搜索条件 isSearch Boolean true 是否显示搜索、清空按钮 buttonGroup Array 详解往下看 搜索条件右侧按钮（默认包含搜索、清空按钮） buttonGroupTop Array 详解往下看 页面表顶部的按钮操作 table Object 详解往下看 表格显示配置 title Object 详解往下看 表格上方标题栏 alertMessage Object 详解往下看 表格提示信息 配置项详解 form 配置 name type default Description ref string '' 表格 ref status string '' 页面状态[add\\save\\updata\\details] direction string '' [vertical\\horizontal] width string '100%' table 宽度 elementWidth string '33.33%' 搜索条件输入框宽度 labelWidth string '' 搜索表单 label 宽度 disabled boolean false 搜索表单所有禁用 formData Object {} 搜索表单的所有数据 group Array [] 搜索表单的输入框配置 { ref: \"queryForm\", //取命必须为整个项目的唯一值， 将作为缓存页码和搜索条件唯一值 status: \"add\", //页面状态 [add / save / update / details] direction: \"horizontal\",//布局方式 [vertical,horizontal] width:\"60%\", //table组件宽度 默认100% elementWidth: \"25%\", //控件宽度 不设置则默认展示三列 labelWidth: \"100px\", //表单label宽度 disabled: false,//是否全局禁用 默认为false formData: {}, //表单数据源 group: [ { params: [ { prop: \"name\", label: \"用户名\", placeholder: \"请输入用户名\", component: { name: \"input\", queryKeySearch: true, // 标记为关键字搜索， 输入参数将不去除空格（只有name为input才有这个属性），默认为false 自动去除输入空格 type: \"text\" } } ] },{ params: [ { prop: \"name\", label: \"用户名\", placeholder: \"请输入用户名\", component: { name: \"select\", type: \"AvailableEnterprise\", loadingStatus: false, // 只能针对select 组件 // 可使用 this.getElement(\"字段名\").options.loadingStatus = true; 来控制loading // setCall 方法来控制什么时候关闭 开启 参考目录 hcd-select } } ] } ] } buttonGroup 配置（当下可配置为[],默认显示搜索和清空按钮，如不需要显示则去掉 buttonGroup 配置项） [ { class: \"hcd_button_default\", text: \"保存\", methods: \"save\", }, { class: \"hcd_button_second\", text: \"返回\", methods: \"back\", }, ]; buttonGroupTop 配置 （当下可配置为[],默认会显示一条下划线，如不需要显示则去掉 buttonGroupTop 配置项） [ { style: \"color:red\", // 配置为文字 type: \"text\", text: \"文字\", }, { class: \"hcd_button_default\", // 配置为按钮 text: \"添加\", methods: \"add\", }, ]; table 配置 name type default Description currentPage number 0 当前页码，需配置为 1 selectableFun funtion 处理显示多选框，对单行数据做判断是否可以勾选，返回值为 boolean 值 （下方有介绍） selection boolean false 是否有多选框 tableData Array [] 为接口返回的数组参数 tableLabel Array [] 配置显示的字段 buttonGroup Array [] 为表格显示的按钮（可通过配置显示装填） { currentPage: 1, //当前页码 selection:true, //是否有多选框 tableData: [], tableLabel: [ { prop: \"name\", title: \"角色名称\" }, { prop: \"status_Text\", title: \"是否启用\", setClass: [ //设置文本class { className: \"hcd_label hcd_label_success\", //class filed: \"status\", //判断字段 value: 1 //判断值 (可以为数组[1,2]，为数组时值关系为or) }, { className: \"hcd_label hcd_label_danger\", filed: \"status\", value: 2 } ], getContent: [ // 替换内容 { content: \"内容\", filed: \"判断字段\", value: 判断值 } ], type:\"html\", //html代码显示 regHtml:\"${name}嗖嗖嗖${vlaue}\",//匹配生成内容 name 为字段 type: \"link\", link: \"./DetailsList?carrierOrderId=${id}\", //跳转 isShow: false //列表是否显示 }, { prop: \"值\", title: \"类型设置小数点\" decimalHandle:{ type:\"设置类型\" }}, { prop: \"comment\", title: \"备注\" }, { prop: \"creationTime\", title: \"创建时间\" }, { title: \"操作\", operation: true, fixed: \"right\",minWidth: \"140\" } // fixed固定左侧还是右侧 operation为按钮显示栏 ], buttonGroup: [ { class: \"hcd_button_default\", icon: \"iconfont iconsetting\", title: \"修改\", size: \"mini\", methods: \"query\", limit:\"ReceiptLimit.UpdateStatusToShipperConfirm\", //权限点 如果存在多个权限点['XXX','bbbb'] 数组格式 isShow: false, //按钮是否显示 conditionType:\"and\", //判断关系 [and/or] 默认and isShowOptions: [ { dataName: \"tableData\", //判断数据源 [formData,tableData] filed: \"status\", //判断字段 value: \"2\" //判断值 } ] } ] } selectableFun 设置 （会一开始循环 table 数组的数据） // 设置方法 selectableFun: any = (row: any, index: any) => { // row为当行数据 如下为例子 if (row.statementStatus == true) { return true; } else { return false; } }; // table配置 selectableFun: this.selectableFun, title 设置 { title: { titleName: \"结算信息\", }, }; alertMessage 设置 { alertMessage: { title: \"\", type: \"info\", // [success/warning/info/error] description: \"\", // 辅助文字 显示在title下方 style: \"margin-top:40px;padding:20px;\", }, }; Copyright © Aron.Li 2019 all right reserved，powered by Gitbook该文件修订时间： 2020-06-18 10:56:28 "},"pageList/son/gridPage_function.html":{"url":"pageList/son/gridPage_function.html","title":"触发事件详解","keywords":"","body":" onFieldChange 返回值 name type default Description field string options form 配置 group 的 prop 字段名 value any 搜索框输入的参数值 // obj.field onFieldChange(obj: any) { switch (obj.field) { case \"字段名\": if (!obj.value) { } break; default: } } onPageClick /** * 以下方法和参数已在 GridPage中定义 需要配置时添加 * maxResultCount * skipCount * Search */ onPageClick(obj: any) { this.skipCount = obj.skipCount; this.maxResultCount = obj.maxResultCount; this.Search(); } onButtonClick (为 options 中配置的 buttonGroup、buttonGroupTop、buttonGroup) onButtonClick(obj: any) { switch (obj.methods) { case \"方法名\": break; default: } } onSelectionClick (多选框触发事件) onSelectionClick(val: any) { // 返回选中的table 数据 } onFieldVisibleChange (select下拉触发事件 返回值同onFieldChange一样) onFieldVisibleChange(obj: any) { switch (obj.field) { case \"字段名称\": break; default: } } Copyright © Aron.Li 2019 all right reserved，powered by Gitbook该文件修订时间： 2020-06-16 17:19:13 "},"pageList/DialogGridPage.html":{"url":"pageList/DialogGridPage.html","title":"DialogGridPage","keywords":"","body":"待更新 Copyright © Aron.Li 2019 all right reserved，powered by Gitbook该文件修订时间： 2020-06-18 10:57:23 "},"pageList/DialogGridPageDetail.html":{"url":"pageList/DialogGridPageDetail.html","title":"DialogGridPageDetail","keywords":"","body":"待更新 Copyright © Aron.Li 2019 all right reserved，powered by Gitbook该文件修订时间： 2020-06-18 10:57:40 "},"pageList/FormGridPage.html":{"url":"pageList/FormGridPage.html","title":"FormGridPage","keywords":"","body":"待更新 Copyright © Aron.Li 2019 all right reserved，powered by Gitbook该文件修订时间： 2020-06-18 10:57:47 "},"pageList/FormPage.html":{"url":"pageList/FormPage.html","title":"FormPage(表单页面)","keywords":"","body":"FormPage 展示如下图 name type default Description type string from(普通表单)\\dialogform(弹窗表单) status string add 为 type = dialogform 出现连续添加按钮 isContinuous boolean true 为 type = dialogform 出现连续添加按钮 title string type = dialogform 标题 width string type = dialogform 宽度 form object 内部表单配置信息 使用方式 触发事件同gridPage一样 import FormPage from \"@/components/Page/FormPage.vue\"; // components 注册子组件 如果作为详情页面 // 作为详情页面，参数回绑 // 例子：res为接口返回值 //1.formData 对应绑定到form配置的group里的prop字段 this.pageOptions.form.formData = res; //2.单个回绑 this.pageOptions.form.formData.name = res.name; this.$set(this.pageOptions.form.formData, \"name\", res.name); // 强制更新 form 配置信息 name type default Description ref string 组件标识，ref 作用 direction string 布局方式 vertical\\horizontal width string form 组件宽度 如\"25%\" elementWidth string 控件（输入框）宽度 如\"25%\" labelWidth string label 宽度 如\"25%\" formData object 对应 group 配置的参数字段 disabled boolean 是否禁用所有的输入框 group array 控件分组配置 buttonGroupGridSumbitStyle string 底部配置按钮样式（可调整底部按钮位置） 如'text-align:center;' buttonGroupGridSumbit Array 底部配置按钮配置 buttonGroupStyle string 配置右上角按钮样式 如'text-align:center;' buttonGroup Array 固定表单右上角按钮 Copyright © Aron.Li 2019 all right reserved，powered by Gitbook该文件修订时间： 2020-06-17 10:26:24 "},"pageList/son/formPage_group.html":{"url":"pageList/son/formPage_group.html","title":"group控件变现详解","keywords":"","body":"group 配置详情 input select checkbox span文字展示 cascader地区选择控件 select-tree树形下拉 upload图片上传 datePicker时间控件 radio单选控件 右插槽 提示信息ellipsis 新增自定义span 控件显示隐藏配置isShow 标题配置 group: [ //控件分组 { title: \"这是一组控件\", //标题名称 tooltipShow: boolean, //标题名称的提示显示 true false tooltipContent: \"\", //提示信息内容 tooltipStyle: \"\", //提示图标样式 itemLoading: boolean, //单栏loading状态 params: [], //字段 }, ]; params 单个控件表现 1.name:select // 例子 { prop: \"carTypeID\", // 字段名 一般为获取的id值 label: \"车辆类型\", placeholder: \"请选择\", filterable：true, // 是否可以进行静态搜索 isHidden：true, // 控件是否显示，默认true disabled: true, // 控件是否禁用，默认false rules: { required: true, // 必填项 message: \"请选择车辆类型\", // 提示信息 trigger: \"blur\" }, component: { name: \"select\", // 类型 type: \"plateType\", // 下拉内容 hcd-select可查看 fields: [ { prop: \"carType\", // 定义字段 key: \"name\" // hcd-select获取的接口数据 } ] } }, // 配置以上信息 可以通过 this.pageOptions.form.group[1].params.find( (element: any) => element.prop == \"carTypeID\" ).disabled = true; // 下拉框添加按钮 (配置component) component: { name: \"select\", // 类型 type: \"plateType\", // 下拉内容 hcd-select可查看 rightButton: { class: \"hcd_button_gray\", text: \"验证身份证\", methods: \"validDrver\", // 会由onButtonClick事件触发 loading: false, }, }, 2.name:input // 例子 { prop: \"name\", label: \"真实姓名\", placeholder: \"请输入真实姓名\", maxlength: 20, rules: { required: true, type: \"ChineseName\", // 验证规则 filterRules中可见 message: \"2-20个中文可以输入圆点\", trigger: \"blur\" }, component: { name: \"input\", type: \"text\" // type可以改为password、textarea 、number 等 } }, // textarea component: { name: \"input\", type: \"textarea\", autosize: { minRows: 2, maxRows: 4 } } 3.name:checkbox 使用checkbox需要在初始化formData配置如下字段agreementStatus 为 false // 例子 { prop: \"agreementStatus\", label: \"\", component: { name: \"checkbox\", data: [ { value: false, htmlText: `同意`, clickHtml: `《货物委托合同》`, activeFun: \"checkboxLabel\" // 点击事件 } ] } } 4.name:span (展示文字) // 例子 { prop: \"code\", label: \"推广码\", maxlength: 4, component: { name: \"span\", value: \"\" }, isShow: false } 5.name:cascader（地区选择） // 例子 { prop: \"area\", label: \"所属地区\", placeholder: \"请选择\", rules: { required: true }, component: { name: \"cascader\", type: \"area\", showAllLevels: false, //是否仅显示全部层级（name=\"cascader\"级联下拉使用） changeOnSelect: true, //是否允许选择任何一级（name=\"cascader\"级联下拉使用） expandTrigger: \"hover\", //下拉展开方式（name=\"cascader\"级联下拉使用） fields: [ { prop: \"enterpriseInfo_provinceID\", key: \"provinceID\" }, { prop: \"enterpriseInfo_cityID\", key: \"cityID\" }, { prop: \"enterpriseInfo_districtID\", key: \"districtID\" }, { prop: \"enterpriseInfo_areaName\", key: \"areaName\" } ] } }, 6.name:select-tree （树结构下拉） // 例子 { prop: \"parentId\", label: \"归属机构\", placeholder: \"请选择归属机构\", component: { name: \"select-tree\", type: \"department\" // 在hcd-select-tree中查看 } }, 6.name:upload （图片上传） // 例子 { width: \"50%\", prop: \"roadTransportCertificateURL\", label: \"道路运输证\", setFieldLabel: \"车辆道路运输证照片\", placeholder: \"请上传照片\", rules: { required: true, message: \"请上传正确内容\", trigger: \"blur\" }, component: { name: \"upload\", type: \"image\", multiple: false, limit: 1 // 限制上传数量 } }, 7.name:datePicker （日期 时间选择） // 例子 { prop: \"condition_Time\", label: \"单据日期\", component: { name: \"datePicker\", type: \"daterange\", fields: [ { prop: \"condition_OrderDateBegin\", key: \"start\" }, { prop: \"condition_OrderDateEnd\", key: \"end\" } ], option:{ //// (name == datePicker 使用) start 开始时间 Function, Object, String - - end 结束时间 Function, Object, String - - disabled 不可选日期配置 Function - - shortcuts 自定义快捷方式 [String, Object] - - minuteStep 分钟的间隔 Number - 5 hours 自定义可选的小时 Function - - minutes 自定义可选的分钟 Function - - } } } 8.name:radio // 例子 { prop: \"enterpriseInfo_authTypeEnum\", //字段名 label: \"单选\", //显示的标题 disabled: false, rules: { required: true, message: \"必须选择一项\", trigger: \"blur\", }, component: { name: \"radio\", //组件名 data: [ { value: EnterpriseAuthTypeEnum.Shipper, label: \"货主\", }, { value: EnterpriseAuthTypeEnum.Carrier, label: \"承运\", }, { value: EnterpriseAuthTypeEnum.ShipperAndCarrier, label: \"货主和承运\", }, ], }, }, 9.name:右插槽 // 例子 component: { rightSlot: { //右插槽 prop: \"name\", //字段名 name: \"select\", //组件名 select/text/button type: \"Contact\", //组件数据类型 defaultSelect: false, //是否默认选中 clearable: true, //是否有清空 placeholder: \"请输入用户名\", //描述文本 disabled: false,//是否禁用 fields: [] //获取其他相关联的字段 query: { type: 1 } ... }, }, 10.name:提示信息 ellipsis // 例子 component: { ellipsis: true, // 提示框信息 ellipsisSet: { style: { // 设置样式 可不传 position: \"absolute\", right: 0, top: 0 }, content: \"123123\" // 内容 } }, 11.name:新增自定义 span // 例子 component: { customSpan: { prop: \"\", // 需要在formData设置默认值 name: \"customSpan\", style: \"自定义样式\", value：\"默认参数\" 当设置了value，prop将不生效 } }, 12.name:控件显示隐藏配置 isShow // 例子 component: { isShow: false, //条件计算结果 conditionType: \"or\", // [or,and] isShowOptions: [ //计算条件 { filed: \"mophone\", //formData中查找参数 valueStatus: \"!\", //非 value: \"13\" //匹配参数值 } ] }, Copyright © Aron.Li 2019 all right reserved，powered by Gitbook该文件修订时间： 2020-06-18 10:40:44 "},"pageList/FormPageSourceOrder.html":{"url":"pageList/FormPageSourceOrder.html","title":"FormPageSourceOrder","keywords":"","body":"待更新 Copyright © Aron.Li 2019 all right reserved，powered by Gitbook该文件修订时间： 2020-06-18 10:57:53 "},"./":{"url":"./","title":"Custom introduction name","keywords":"","body":"使用 gitbook 创建 hcd 项目文档 安装 npm install gitbook -g 创建 npm install -g gitbook-cli （查看不需要创建） 执行 gitbook serve 目录 SUMMARY.md 左边导航菜单 pageList 说明文档页面 查看地址 打包发布page: gitbook build ./ ./docs Copyright © Aron.Li 2019 all right reserved，powered by Gitbook该文件修订时间： 2020-06-16 17:41:59 "}}